// Personal Potions V2 Database Schema
// Optimized for V1 calculation framework compatibility with zero data loss

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================== CORE SURVEY DATA ==================

/// Main table storing complete V1 CustomerData with dual intake format support
model CustomerSurvey {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?  @map("user_id") @db.Uuid
  sessionId String   @map("session_id") @db.VarChar(255)
  
  // V1 Customer Data (JSONB for exact preservation)
  /// Complete CustomerData interface stored as JSONB - preserves all 26 fields exactly
  customerData Json   @map("customer_data")
  
  // Derived fields for performance (extracted from JSONB)
  age              Int?     
  biologicalSex    String?  @map("biological_sex")
  weight           Decimal? @db.Decimal(5,2)
  activityLevel    String?  @map("activity_level")
  sweatLevel       String?  @map("sweat_level")
  detectedUseCase  String?  @map("detected_use_case")
  
  // CRITICAL: Intake format tracking for dual support
  /// Tracks whether each intake field used 'legacy' or 'numeric' format
  intakeFormats    Json?    @map("intake_formats")
  
  // Status and metadata
  status               String   @default("draft") // draft, completed, processed
  completionPercentage Decimal? @default(0) @map("completion_percentage") @db.Decimal(5,2)
  
  // HIPAA audit trail
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  expiresAt  DateTime? @map("expires_at") @db.Timestamptz(6)
  source     String    @default("web")
  ipAddress  String?   @map("ip_address")
  userAgent  String?   @map("user_agent")
  
  // Relations
  formulationResults FormulationResult[]
  intakeConversions  IntakeConversion[]
  
  @@map("customer_surveys")
  @@index([userId], map: "idx_customer_surveys_user_id")
  @@index([sessionId], map: "idx_customer_surveys_session_id")
  @@index([status], map: "idx_customer_surveys_status")
  @@index([age], map: "idx_customer_surveys_age")
  @@index([biologicalSex], map: "idx_customer_surveys_biological_sex")
  @@index([detectedUseCase], map: "idx_customer_surveys_use_case")
  @@index([createdAt], map: "idx_customer_surveys_created_at")
  // GIN indexes for JSONB fields (created via raw SQL migration)
}

// ================== FORMULATION RESULTS ==================

/// Stores calculated V1 formulation outputs with metadata
model FormulationResult {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customerSurveyId  String   @map("customer_survey_id") @db.Uuid
  
  // V1 Formulation Result (exact structure preservation)
  /// Complete FormulationResult interface stored as JSONB
  formulationResult Json     @map("formulation_result")
  
  // Quick access fields (indexed for performance)
  useCase        String  @map("use_case")
  formulaVersion String  @default("1.4") @map("formula_version")
  servingSize    String  @default("16 fl oz (473ml)") @map("serving_size")
  
  // Electrolyte amounts per serving (mg) - extracted for fast queries
  sodiumMg     Decimal? @map("sodium_mg") @db.Decimal(8,3)
  potassiumMg  Decimal? @map("potassium_mg") @db.Decimal(8,3)
  magnesiumMg  Decimal? @map("magnesium_mg") @db.Decimal(8,3)
  calciumMg    Decimal? @map("calcium_mg") @db.Decimal(8,3)
  
  // Business fields
  priceCents   Int?    @map("price_cents")
  formulaName  String? @map("formula_name")
  
  // Audit
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  calculationTimestamp DateTime @default(now()) @map("calculation_timestamp") @db.Timestamptz(6)
  
  // Relations
  customerSurvey CustomerSurvey @relation(fields: [customerSurveyId], references: [id], onDelete: Cascade)
  
  @@map("formulation_results")
  @@index([customerSurveyId], map: "idx_formulation_results_survey_id")
  @@index([useCase], map: "idx_formulation_results_use_case")
  @@index([createdAt], map: "idx_formulation_results_created_at")
  // GIN index for formulation_result JSONB (created via raw SQL migration)
}

// ================== INTAKE CONVERSION AUDIT ==================

/// Tracks dual format intake conversions for audit and debugging
model IntakeConversion {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customerSurveyId String   @map("customer_survey_id") @db.Uuid
  
  // Conversion tracking
  electrolyte      String   // sodium, potassium, magnesium, calcium
  originalValue    String   @map("original_value")
  originalFormat   String   @map("original_format") // legacy, numeric
  convertedMg      Decimal  @map("converted_mg") @db.Decimal(8,3)
  conversionSource String   @map("conversion_source") // LEGACY_INTAKE_ESTIMATES, DIRECT_NUMERIC
  
  // Audit
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  
  // Relations
  customerSurvey CustomerSurvey @relation(fields: [customerSurveyId], references: [id], onDelete: Cascade)
  
  @@map("intake_conversions")
  @@index([customerSurveyId], map: "idx_intake_conversions_survey_id")
  @@index([electrolyte], map: "idx_intake_conversions_electrolyte")
  @@index([originalFormat], map: "idx_intake_conversions_format")
}

// ================== VALIDATION CONSTRAINTS ==================
// Additional constraints will be added via raw SQL migrations:
// - Age validation (13-120)
// - Weight validation (80-400 lbs)
// - Status enum constraints
// - Positive electrolyte amounts
// - JSONB structure validation
// - GIN indexes for JSONB fields
